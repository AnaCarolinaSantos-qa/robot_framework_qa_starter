name: Pipeline completa — Robot Framework

on:
  pull_request:
    branches: ["**"]
  push:
    branches: ["main"]
  schedule:
    # 05:00 UTC ≈ 02:00 America/Sao_Paulo
    - cron: "0 5 * * *"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  RESULTS_DIR: "results"
  CHROME_ARGS: "--headless=new;--disable-gpu;--disable-dev-shm-usage;--no-sandbox;--window-size=1366,900"

jobs:

  api:
    name: API
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RF_TAGS: ${{ github.event_name == 'pull_request' && 'smoke' || 'regression' }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: requirements.txt

      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ▶️ Executar testes de API
        run: |
          mkdir -p "$RESULTS_DIR/api"
          if [ -d tests/API_tests ]; then
            robot -d "$RESULTS_DIR/api" -i "${RF_TAGS}" tests/API_tests
          else
            echo "Diretório tests/API_tests não encontrado, pulando API."
          fi

      - name: 📎 Artefatos (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-${{ env.RESULTS_DIR }}-${{ github.run_id }}
          path: ${{ env.RESULTS_DIR }}/api/**
          retention-days: 14

  ui:
    name: UI
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      RF_TAGS: ${{ github.event_name == 'pull_request' && 'smoke' || 'regression' }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: requirements.txt

      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🌐 Instalar Chrome + ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: "stable"
          install-dependencies: true

      - name: ▶️ Executar testes de UI (headless)
        env:
          BROWSER: chrome
        run: |
          mkdir -p "$RESULTS_DIR/ui"
          if [ -d tests/UI_tests ]; then
            robot -d "$RESULTS_DIR/ui" -i "${RF_TAGS}" \
              -v BROWSER:${BROWSER} -v CHROME_ARGS:"${CHROME_ARGS}" \
              tests/UI_tests
          else
            echo "Diretório tests/UI_tests não encontrado, pulando UI."
          fi

      - name: 📎 Artefatos (UI)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-${{ env.RESULTS_DIR }}-${{ github.run_id }}
          path: ${{ env.RESULTS_DIR }}/ui/**
          retention-days: 14

  a11y:
    name: Acessibilidade
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: requirements.txt

      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ▶️ Executar testes de A11y
        run: |
          mkdir -p "$RESULTS_DIR/a11y"
          if [ -d tests/accessibility_tests ]; then
            robot -d "$RESULTS_DIR/a11y" -i a11y tests/accessibility_tests
          else
            echo "Diretório tests/accessibility_tests não encontrado, pulando A11y."
          fi

      - name: 📎 Artefatos (A11y)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-${{ env.RESULTS_DIR }}-${{ github.run_id }}
          path: ${{ env.RESULTS_DIR }}/a11y/**
          retention-days: 14

  perf:
    name: Performance (k6)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Instalar k6
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg2 ca-certificates
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/k6.gpg
          echo "deb [signed-by=/etc/apt/keyrings/k6.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update && sudo apt-get install -y k6

      - name: ▶️ Executar k6 (se houver script)
        run: |
          mkdir -p "$RESULTS_DIR/perf"
          if [ -f tests/performance_tests/main.js ]; then
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              k6 run --vus 2 --duration 1m --summary-export="$RESULTS_DIR/perf/summary.json" tests/performance_tests/main.js
            else
              k6 run --vus 5 --duration 3m --summary-export="$RESULTS_DIR/perf/summary.json" tests/performance_tests/main.js
            fi
          else
            echo "tests/performance_tests/main.js não encontrado, pulando k6."
          fi

      - name: 📎 Artefatos (Perf)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-${{ env.RESULTS_DIR }}-${{ github.run_id }}
          path: ${{ env.RESULTS_DIR }}/perf/**
          retention-days: 14

  resumo:
    name: 📝 Resumo
    runs-on: ubuntu-latest
    needs: [api, ui, a11y, perf]
    if: always()
    steps:
      - name: Escrever Step Summary
        run: |
          echo "## ✅ Resumo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Resultado |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| API | ${{ needs.api.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| UI | ${{ needs.ui.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| A11y | ${{ needs.a11y.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Perf | ${{ needs.perf.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: 📣 Notificar Slack (opcional)
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          TEXT="Pipeline ${{ github.run_id }} finalizada. API:${{ needs.api.result }} | UI:${{ needs.ui.result }} | A11y:${{ needs.a11y.result }} | Perf:${{ needs.perf.result }}"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$TEXT\"}" "$SLACK_WEBHOOK_URL"
